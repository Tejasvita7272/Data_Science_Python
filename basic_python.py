# -*- coding: utf-8 -*-
"""Basic_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1thqwXPZKNgjgYc4t90aypqLCEHjfo49b
"""

print("Welcome to ExcelR")

120/12*2-4

(5-2)*10

marks=80
marks

type(marks)  # to know the data type of variable

5**3   #cube of 5

price=50.5
price # only show output of last line 
type(price)

price=50.5
print(price) # To see intermediate lines output use print() function
type(price)

name="Teja"
type(name)

dir(str) # all methods that can be applied on strings 
# __ dunder funtion/ magic methods

str="welcome to Data science"
str.capitalize()

str.upper()

str.lower()

str.title()  # 1st letter of each word will be capital|

food="bIrYAni"
name="TeJa"
print(food.swapcase())
name.swapcase()

s1="My name is Teja."
print(s1.split()) # list of strings is created

s2="Mumbai-pune-Mumbai"
s2.split("-")

mail="teja@gmail.com"
mail.split("@")

s1.replace("Teja","Sanket")

# single line comment

'''
multiline comment
'''

city="Satara"
city.count("a")

"satara".count("t")

name="Raj"
name*4

n1=5
n1*5

name="Teja"
surname="Nale"
name + surname # concatenates without space

name + " " + surname   # concatenates with space

# Conditional Statement
a=10
b=20
if(a>b):
  print("a is greater",a)
else:
  print("b is greater",b)

a=10
b=20
if(10<20):
  print("10 is less than 20")
else:
  print("20 is grester than 10")

salary=25000
print("salary=25000")
if(salary>20000):
  tax=0.25
  print("Hello from true if")
else:
  tax=0.20
  print("Hello from false if / else")
print("Bye... outside of if block")
net_sal = salary - tax*salary
print(net_sal)  
print("**************************")
# change value of salary as 15000 and excute again 

salary=15000
print("salary=15000")
if(salary>20000):
  tax=0.25
  print("Hello from true if")
else:
  tax=0.20
  print("Hello from false if / else")
print("Bye... outside of if block")
net_sal = salary - tax*salary
print(net_sal)

range(5,10)

#for loop
for number in range(5,10): # print numbers from 5 to 9. default increment value is 1.
  print(number)

# print numbers 1 to 10
for i in range(1,11,1):
  print(i)

# print all even number from 1 to 20
for even in range(2,21,2):
  print(even)

# print all odd number from 1 to 20
for odd in range(1,20,2):
  print(odd)

# 'break' statement terminates the loop when condition is satisfied
for i in range(1,11):
  if i == 5:
    break
  else:
    print(i)

for num in range(10): #range is 0 to 9
 print(num, num*num, num*num*num, num**2)  # num and its square and its cube

for i in range(1,11):
  if i == 5:
    print("same")
    break
  else:
    print(i)

# range(start,stop,step)
for i in range(1,30,5):
  #print(i)
  print(i,end=" --@-- ")

subject="science"
for letter in subject:
  print(letter)

  #print(letter, end="")

#  23-12-2022
list3=["mango","apple","banana","strawberry","pineapple","custer apple","mulberry"]

# List comprehension - marks your code compact
l1=[2,3,4,5,6]
l2=[i**2 for i in l1]
print(l1,end=" ")
print(l2,end=" ")

# extract fruit names containing substring 'berry' using list comprehension
list3

newlist=[fruit for fruit in list3 if 'berry' in fruit]
#print(newlist, end=" ")
newlist

newlist1=[fruit for fruit in list3 if 'berry' not in fruit]
print(newlist1, end=" ")

list3

list3.index('banana')

list3.index('strawberry')

list3.index('tomato')

# index 2 item was banana which is replaced by orange
# lists are mutable - you can replace item
list3[2]="orange"
list3

# data structure: 2.TUPLE
# Tuples are not mutable i.e. immutable
#create using round bracekt
t1=(1,2,3,4,5)
t1

t1[0]=7

dir(t1)

t1.count(1)  # count of 1 no. in tuple

t1.index(4)

t2=(1,1,1,2,2,6,6,6,6,6,6)

t2.count(6)

# indexing and slicing with tuple is same as list
# extracting elements of tuple
t1[2]

t1

t1[1:5]

# data structure : 3. Dictionary
# dictionaries are used to store data values in key: value pairs
# A dictionary is a collection which is ordered, changeable and not allow duplication.
# dictionaaris are written with curly brackets, and have keys and values.
# here, keys are unique identifiers that are associated with each value.:

capital_dict={"Nepal":"kathmandu","Italy":"Rome","England":"London"}
print(capital_dict)

type(capital_dict)

dir(capital_dict)

# access elements of dictionary
capital_dict=["England"]

keys=capital_dict.keys()
keys

values=capital_dict.values()
values

