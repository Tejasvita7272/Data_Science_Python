# -*- coding: utf-8 -*-
"""Visualization-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kht2Mcy2PdrdFEKn5iev0wvcXcIqw44M
"""

# upload salaries.csv
import pandas as pd
df=pd.read_csv('/content/Salaries.csv')
df

import matplotlib.pyplot as plt
#!pip install  --upgrade matplotlib

df.columns

# bar plot
df['discipline'].value_counts().plot.bar()

#scatter plot
import matplotlib.pyplot as plt
ages=[30,38,45,29,50,47]
salary=[30000,38000,40000,29000,60000,50000]
plt.scatter(ages,salary,color="blue")
plt.xlabel=("Age of person")
plt.ylabel=("Salary of person")
plt.suptitle=("Salary Distribution of employees")

x=[-5,-3,-4,2,4,6,7,10]
y=[35,34,60,50,20,70,90,80]
plt.figure(figsize=(10,6))
plt.plot(x,y)
plt.xlabel=("x label")
plt.ylabel=("y label")
plt.title=("x vs y plot")
plt.suptitle=("Learning visualization")
#plt.xlim(-20,20)
#plt.ylim(10,100)

#plot graph of no.(-100 to 100) and its square. use range function
x=list(range(-100,101))
y=[i**2 for i in x]

plt.plot(x,y)

x

y

from math import exp
x=list(range(0,30))
y=[exp(i) for i in x]
plt.plot(x,y)

x

y

from math import log
x=list(range(1,101))
y=[log(i) for i in x]
plt.plot(x,y)

# HOME WORK 27-12-2022 

import matplotlib.pyplot as plt
from math import *
plt.figure(figsize = (16,9))
x=list(range(-10,11))
y=[i**2 for i in x]
plt.subplot(3,4,1)  # 3 X 4 grid, 1=position of graph 1  2  3  4 
#                                                     5  6  7  8
#                                                     9 10 11 12

plt.plot(x,y)
plt.title=("Graph of Square")

y=[i**3 for i in x]
plt.subplot(3,4,7)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[sin(i) for i in x]
plt.subplot(3,4,10)  # 11 = position of graph
plt.plot(x,y)
plt.title=("Graph of sin(x)")

# ONE MORE EXAMPLE FOR PRACTICE 27-12-2022

import matplotlib.pyplot as plt
from math import *
plt.figure(figsize = (16,9))
x=list(range(-10,11))
y=[i**4 for i in x]
plt.subplot(3,4,1)  # 3 X 4 grid, 1=position of graph 1  2  3  4 
#                                                     5  6  7  8
#                                                     9 10 11 12

plt.plot(x,y)
plt.title=("Graph of Square")

y=[i**5 for i in x]
plt.subplot(3,4,2)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[tan(i) for i in x]
plt.subplot(3,4,3)  # 11 = position of graph
plt.plot(x,y)
plt.title=("Graph of sin(x)")

y=[i**5 for i in x]
plt.subplot(3,4,4)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[i**5 for i in x]
plt.subplot(3,4,5)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[i**5 for i in x]
plt.subplot(3,4,6)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[i**5 for i in x]
plt.subplot(3,4,7)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[i**5 for i in x]
plt.subplot(3,4,8)  # 7 = position of graph
plt.plot(x,y)
plt.title=("Graph of cube")

y=[tan(i) for i in x]
plt.subplot(3,4,9)  # 11 = position of graph
plt.plot(x,y)
plt.title=("Graph of sin(x)")

y=[tan(i) for i in x]
plt.subplot(3,4,10)  # 11 = position of graph
plt.plot(x,y)
plt.title=("Graph of sin(x)")

y=[tan(i) for i in x]
plt.subplot(3,4,11)  # 11 = position of graph
plt.plot(x,y)
plt.title=("Graph of sin(x)")

y=[tan(i) for i in x]
plt.subplot(3,4,12)  # 11 = position of graph
plt.plot(x,y)
plt.title=("Graph of sin(x)")

"""# **28-12-2022  Wednesday**"""

# upload data set
data=pd.read_csv("mtcars.csv")
data

data.shape

#find no. of cars having certain no. of cylinders and certain no. of gears
pd.crosstab(data['cyl'],data['gear'])
# eg crosstab shows there are 4 cars with 6 cylinders and 4 gears

pd.crosstab(data['cyl'],data['gear']).plot(kind='bar')
# Refer below link to see plot() function in pandas - kind parameter
# https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html

data['gear'].value_counts()

# data.gear.value_counts().plot(kind='pie')
data.cyl.value_counts().plot(kind='pie')

# scatter plot
plt.scatter(data.mpg,data.qsec,color="green")
#plt.xlabel=("mpg")
#plt.ylabel=("qsec")
#plt.title=("mpg Vs qsec plot")

# Histogram - inbuild function for histogram is hist()
plt.hist(data['mpg'],edgecolor="red")
# google - plt.hist in matplotlib
# mpg             no. of cars
# 10.4 to 12.75   2
# 12.75 to 15.1   4 and so on... such 10 bins/bars/categories are created by default

# HISTOGRAM
plt.hist(data['mpg'],facecolor="pink",edgecolor="blue")
# 6 categories are created

# BOXPLOT
plt.boxplot(data['mpg'])
# returns result in the form of dictionary {} 
# Always refer official documentation
# check 'boxplot in matplotlib documentation' in google, parameter and its explanation is given

plt.boxplot(data['mpg'],vert=False,notch=True)
#plt.xlabel=("MPG")
#plt.ylabel=("Boxplot")
#plt.title=("Boxplot of MPG")

data.describe()

data.plot(kind='hist')

data.hist(figsize=(15,5))
plt.show()

plt.figure(facecolor='green')
# markers: https://matplotlib.org/stable/api/markers_api.html#module-matplotlib.markers
#plt.title=('Scatterplot',color="blue")
#plt.xlabel=('mpg',color='red',size=10)
#plt.ylabel=('qsec',color='green',size=10)
plt.axes()
plt.scatter(data.mpg,data.qsec,marker='^')
plt.show()

#violin plot
import matplotlib.pyplot as plt
plt.violinplot(data['mpg'])

plt.violinplot(data['mpg'])
box=plt.boxplot(data['mpg'])
plt.show()

"""# **Seaborn**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

tips =sns.load_dataset('tips')
# tips is an inbuilt dataset of seaborn
# sns.get_dataset_names()

tips.head()

tips.shape

tips.describe()

pd.crosstab(tips['smoker'],tips['sex'])

pd.crosstab(tips['smoker'],tips['sex']).plot(kind='bar')

# seaborn plots documentaion - https://seaborn.pydata.org/tutorial/function_overview.html
#strip plot
sns.stripplot(y='tip',data=tips,jitter=True)
#sns.stripplot(y='tip',data=tips,jitter=False)  # jitter = False
plt.show()

#Grouping with stripplot() 
sns.stripplot(y='tip',x='sex',data=tips,jitter=True) # try jitter=False
plt.show()

sns.stripplot(x='day',y='tip', data=tips,jitter=True) # try jitter=False
plt.show()

sns.stripplot(x='day', y='tip', data=tips, size=5,jitter=True)
#plt.ylabel=('tip ($)')
plt.show()

#Swarm Plot
import seaborn as sns
sns.swarmplot(x='day',y='tip',data=tips,size=6)
plt.show()

# high amount of tip is given by male and specifically on Saturday
sns.swarmplot(x='day', y='tip', data=tips, hue='sex')
#plt.ylabel=('tip ($)')
plt.show()

# high amount of tip is given by male and specifically on Saturday
sns.swarmplot(x='day',y='tip',data=tips,hue='time', size=6)
#plt.ylabel=('tip ($)')
plt.show()

# subplots
plt.subplot(2,2,2) # nrows,ncols,position
sns.boxplot(x='day', y='tip', data=tips)
#plt.ylabel=('tip ($)')
#plt.title=("Boxplot of tips")

plt.subplot(2,2,3)
sns.violinplot(x='day', y='tip', data=tips)
#plt.ylabel=('tip ($)')
#plt.title=("violin plot of tips")

plt.show()

## combining plots
# check sns.violinplot doc.

sns.violinplot(x='day', y='tip',data=tips, inner='quartile', color='lightgray')
sns.stripplot(x='day', y='tip',data=tips, size=4, jitter=True)
#plt.ylabel('tip ($))
plt.show()

sns.scatterplot(tips['total_bill'], tips['tip'])
plt.show()
# Observation: tip amount is increasing with total bill value

sns.scatterplot(tips['total_bill'], tips['tip'],hue=tips['time'])
plt.show()
# same points plotted but as per time - lunch & dinner

#Swarm plot
plt.figure(figsize=(10,5))
sns.swarmplot(x='day', y='tip', data=tips,facecolor='black')
sns.violinplot(x='day',y='tip',data=tips,color='black')
#plt.ylabel('tip ($)')
plt.show()

# changing orientation
sns.swarmplot(x='tip',y='day',data=tips,hue='time', orient='h')
#plt.xlabel=('tip ($)')
plt.show()

"""# **Box and Violin Plot**"""

plt.figure(figsize=(10,10))
sns.violinplot(x='day', y='tip',data=tips)
sns.boxplot(x='day', y='tip', data=tips)

#plt.ylabel('tip ($)')
plt.show()

sns.violinplot(x='day', y='tip', data=tips)
#plt.ylabel('tip ($)')

plt.show()

tips

fig,ax=plt.subplots(nrows=2,ncols=2) # empty spaces for plots, change nrows and ncols

#joint plot - scatter plot and individual histogram of x and y variables
sns.jointplot(x='total_bill', y='tip',data=tips)
plt.show()

#density  plot
sns.jointplot(x='total_bill', y='tip',data=tips,kind='kde')
plt.show()
# Contours are created representing various levels of density of the data

pd.plotting.scatter_matrix(tips)
plt.show()

#Pair plot : If dataset has many numeric columns, you can plot many plots of diff. combination using pairplot
# diagonally it gives histo or bar plot of individual plot of total_bill, tip and size
sns.pairplot(tips)
plt.show()

sns.pairplot(tips, hue='sex') # diagonally male female distribution
plt.show() # try hue=time,smoker,day,etc. to check diff. patterns, gain more information

